#!/usr/bin/env node

(async function () {

    const {Command} = require("commander");
    const swan = require('..');
    const types = require('../lib/types');
    const version = require("../package.json").version;

    // Heading message
    console.log(`Swan v${version}`);

    // Parse the command-line parameters
    const cmd = new Command();
    cmd.version(version);
    cmd.option("-i, --import <path>", "run a Swan script before starting the REPL");
    cmd.parse();
    const options = cmd.opts();

    // Create the swan execution context
    const context = swan.createContext({
        exit: () => {
            console.log();
            process.exit(0)
        }
    });

    // Import the external script
    if (options.import) {
        
        const path = require('path');
        const importPath = path.resolve(process.cwd(), options.import);
        console.log(`Evaluating ${importPath}`);
        
        const fs = require('fs');
        const source = fs.readFileSync(importPath, "utf8");
        
        await swan.parse(source)(context);
    }
    

    // Start the REPL
    console.log("Starting REPL: type `exit()` to quit\n");
    
    const readline = require("readline");
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });    

    rl.on("close", function() {
        process.exit(0);
    });

    const read = prompt => new Promise((resolve, reject) => {
        rl.question(prompt, resolve);
    });
    
    while (true) {
        const expression = await read('%> ');
        const evaluate = swan.parse(expression);
        const value = await evaluate(context);
        if (value !== null) {
            console.log(await context.str(value));
            console.log();
        }
    }    
})();